{"version":3,"sources":["util/Spotify.js","Component/SearchBar/SearchBar.js","Component/Track/Track.js","Component/TrackList/TrackList.js","Component/SearchResults/SearchResults.js","Component/Playlist/Playlist.js","Component/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","event","this","onSearch","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","renderAction","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","headers","Authorization","fetch","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","addEventListener","find","playlistTrack","push","filter","document","querySelectorAll","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3211337b.chunk.js","sourcesContent":["const clientId = '19b405bb06c241189eddf2c81ae83da8';\r\nconst redirectUri = 'http://http://wonderful-toothpaste.surge.sh';\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n      if (accessToken) {\r\n        return accessToken\r\n      } \r\n  \r\n      // Checks for access token match. Each returned value will be an array.\r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n  \r\n      if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n  \r\n        // Clears parameters and allows us to grab new Access Token when one expires\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n      } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n        window.location = accessUrl;\r\n      }\r\n    },\r\n  \r\n    search(term) {\r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = {Authorization: `Bearer ${accessToken}`};\r\n  \r\n      return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {headers: headers}\r\n      ).then(response => {\r\n        return response.json()\r\n      }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        } \r\n        return jsonResponse.tracks.items.map(track => {\r\n          return {\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri,\r\n          }\r\n        });\r\n      });\r\n    },\r\n  \r\n    savePlaylist(name, trackUris) {\r\n      if (!name || !trackUris.length) {\r\n        return;\r\n      }\r\n  \r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = {Authorization: `Bearer ${accessToken}`};\r\n      let userId;\r\n  \r\n      return fetch('https://api.spotify.com/v1/me', {\r\n        headers: headers\r\n      }).then(response => {\r\n        return response.json()\r\n      }).then(jsonResponse => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({name: name}),\r\n        }).then(response => {\r\n          return response.json()\r\n        }).then(jsonResponse => {\r\n          const playlistId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({uris: trackUris}),\r\n          })\r\n        })\r\n      })\r\n    },\r\n  }    \r\n        \r\n  export default Spotify;","import React from 'react';\r\n\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: ''\r\n    }\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  search(event) {\r\n    this.props.onSearch(this.state.term)\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({term: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input \r\n          placeholder=\"Enter A Song, Album, or Artist\" \r\n          onChange={this.handleTermChange}\r\n        />\r\n        <button \r\n          className=\"SearchButton\"\r\n          onClick={this.search}\r\n        >SEARCH</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderAction = this.renderAction.bind(this);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n    } else {\r\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track)\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport Track from '../Track/Track';\r\n\r\nimport './TrackList.css';\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {\r\n          this.props.tracks.map(track => {\r\n            return <Track \r\n              track={track}\r\n              key={track.id}\r\n              onAdd={this.props.onAdd}\r\n              onRemove={this.props.onRemove}\r\n              isRemoval={this.props.isRemoval}\r\n            />\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nimport './SearchResults.css';\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList \r\n          tracks={this.props.searchResults}\r\n          onAdd={this.props.onAdd}\r\n          isRemoval={false}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nimport './Playlist.css';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input \r\n          defaultValue={'New Playlist'}\r\n          onChange={this.handleNameChange}\r\n        />\r\n        <TrackList \r\n          tracks={this.props.playlistTracks}\r\n          onRemove={this.props.onRemove}\r\n          isRemoval={true}\r\n        />\r\n        <button \r\n          className=\"Playlist-save\"\r\n          onClick={this.props.onSave}\r\n        >SAVE TO SPOTIFY</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: '',\n      playlistTracks: [],\n    }\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('load', () => {Spotify.getAccessToken()});\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => this.setState({searchResults: searchResults}));\n  }\n\n  addTrack(track) {\n    let playlistTracks = this.state.playlistTracks;\n    if (playlistTracks.find(playlistTrack => playlistTrack.id === track.id)) {\n      return;\n    }\n    playlistTracks.push(track);\n    this.setState({playlistTracks: playlistTracks})\n  }\n\n  removeTrack(track) {\n    let playlistTracks = this.state.playlistTracks;\n    playlistTracks = playlistTracks.filter(playlistTrack => playlistTrack.id !== track.id);\n    this.setState({playlistTracks: playlistTracks})\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name})\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris);\n    this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: [],\n    });\n    document.querySelectorAll('input')[1].value = 'New Playlist';\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>  HE<span className=\"highlight\">ART</span>LESS</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults} \n              onAdd={this.addTrack}\n            />\n            <Playlist \n              playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Component/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}